			+--------------------+
			|    EDA092/DIT400   |
			| LAB ASSIGNMENT 2:  |
			| 	THREADS      |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- GROUP XX ----

>> Fill in the group number, names and email addresses of your group members.

Simon Widlund <wisimon@student.chalmers.se>
Rikard Ekbom <ekbomr@student.chalmers.se>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to /src/threads/thread.h:
	int64_t sleep_ticks
		- Keeps track of how many ticks until thread wakeup.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

First copy the value of the ticks argument to the sleep_ticks struct member.
Then we disable external interrupts with a call to intr_disable, to prevent
the thread_block call from being interrupted by some external event.
After the thread_block call, we explicitly re-enable external interrupts.

The interrupt handler, called timer_interrupt, increments the global
tick counter, then it iterates over all threads with thread_foreach, and
runs our function decr_tick_count on every thread.

decr_tick_count first checks if the thread is blocked, and if the sleep_ticks count is > 0,
sleep_ticks is decremented, and finally we check if the sleep_ticks has
reached 0. If it has, we call thread_unblock to unblock the current thread.

After unblocking, the interrupt handler increments the system tick with a call
to thread_tick.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

The only thing we can realistically optimize is the function that is run
on each thread. To make this function as fast as possible, we first check
if the thread is blocked. If it is not, we return immediately.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?



			    BATCH SCHEDULING
			    ================
---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, semaphore, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- SYNCHRONIZATION ----

>> C1: How does your solution guarantee that no more that 3 tasks
>> are using the bus in the same direction?

>> C2: What prevents tasks from opposite directions from using the
>> bus simultaneously?

>> C3: How does your solution grant priority to high priority tasks over
>> the waiting tasks in the same direction?

>> C4: How do you guarantee that despite having priority, high priority
>> tasks do not start using the bus while there are still still using
>> it in the oposite direction?

---- RATIONALE ----

>> C6: Why did you choose this design? Did you consider other design
>> alternatives? In what ways is it superior to another design you considered?


			   SURVEY QUESTIONS (optional)
			   ===========================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters?

>> Any other comments?
