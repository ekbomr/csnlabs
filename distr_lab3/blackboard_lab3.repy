# FEEL FREE TO CHANGE THE CODE.
# This is just a dull example

# ------------------------------------------------------------------------------
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------
def start_board():
  ip = mycontext['myIP']
  port = mycontext['myPort']
  print "Listening on IP " + str(ip) +" port " + str(port)
  try:
    listencommhandle = waitforconn(ip,port,board)
  except Exception, e:
    print ("Exception in start_board: %s, %s\n" %(type(e), e))
    raise

# ------------------------------------------------------------------------------
# Called when an incoming message is received.
# ------------------------------------------------------------------------------
def board(remoteIP, remotePort, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message,
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    if msgheader.startswith( 'GET' ):
      refresh_page(sockobj)
      stopcomm(thiscommhandle)

    elif msgheader.startswith( 'POST' ):
      print "got POST:\n", msgheader
      msg = msgheader[:msgheader.find('comment')] + 'SEQ' + str(mycontext['seqNumber'] + 1) + msgheader[msgheader.find('comment'): ]
      msg = 'BOARD_UPDATE' + msg

      mycontext['lock'].acquire()
      vesselIPs = mycontext['iplist']
      for ipaddr in vesselIPs:
        if not ipaddr == mycontext['myIP']:
          socketobject = openconn(ipaddr, mycontext['myPort'])
          socketobject.send(msg)

      mycontext['lock'].release()
      addMessageToBoard(msgheader)
      refresh_page(sockobj)
      stopcomm(thiscommhandle)

    #Receive a board update from the posting vessel
    elif msgheader.startswith('BOARD_UPDATE'):
      print "got BOARD_UPDATE:\n", msgheader

      seqNumber = msgheader[msgheader.find('SEQ:') + 4 : msgheader.find('comment')]
      if seqNumber > mycontext['seqNumber']:
         mycontext['seqNumber'] += 1

      for index in range(len(mycontext['boardMessages'])):
        if index == len(mycontext['boardMessages']):
          mycontext['boardMessages'].insert(index, (seqNumber, remoteIP, msg)

        elif seqNumber == mycontext['boardMessages'][index][0]:
          if not compareIPaddresses(mycontext['boardMessages'][index][1], remoteIP):
            mycontext['boardMessages'].insert(index, (seqNumber, remoteIP, msg)
            break

      addMessageToBoard(msgheader)
      stopcomm(thiscommhandle)

    else:
      print "got something:\n", msgheader
      stopcomm(thiscommhandle)

  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)
    raise

#return true if ip1 is greater than ip2
def compareIPaddresses(ip1, ip2):
  ip1list = ip1.split('.')
  ip2list = ip2.split('.')

  ip11 = ""
  for octet in ip1list:
    ip11 = ip11 + octet

  ip22 = ""
  for octet in ip2list:
    ip22 = ip22 + octet

  return int(ip11) > int(ip22)

# Takes the recieved message and adds it to the list of board messages.
def addMessageToBoard(msgheader):

  msg = msgheader[msgheader.find('comment') + 8: ]
  mycontext['boardMessages'].insert(0, msg)

# Refreshes the page and sends an acknowledgement to the browser
def refresh_page(sockobj):
  htmlresponse = generate_html_page()
  sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
  "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))

# ------------------------------------------------------------------------------
# Outputs the blackboard html
# ------------------------------------------------------------------------------
def generate_html_page():
  entry = ""
  if mycontext['boardMessages'] == []:
    entry = "Empty..."
  else:
    for message in mycontext['boardMessages']:
      entry += message + '<br>'

  content ='<div class="entry">%s</div>' %( entry )
  # dynamic title showing Ip address, port and up time.
  board_title = '<div id="boardtitle_placeholder" class="boardtitle">Board contents at host: %s:%u, up time: %u sec.</div>' %(mycontext['myIP'], mycontext['myPort'], int(getruntime()))
  # merging the contents of the board with the title
  # and wrapping all with <div id="boardcontents_placeholder”>...</div>
  content = '<div id="boardcontents_placeholder">%s%s</div>' %(board_title, content)
  #Concatenate strings into huge string representing the final html
  content = "".join([mycontext['headerhtml'], content, mycontext['footerhtml']])
  return content

# ------------------------------------------------------------------------------
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens the socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # Running remotely (assuming that we pass one input argument only when we run remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  if len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()

    vesselIPs = []
    ipList = open('iplist.txt', 'r')
    for ipaddr in ipList:
      vesselIPs.append(ipaddr.rstrip())

    mycontext['iplist'] = vesselIPs
    ipList.close()

  # To run locally: use the loopback ip address (127.0.0.1) and a port in the range 63100 .. 63110
  # If you start multiple local instances using different ports, you can debug and test your code locally
  # example:
  # python ../demokit/repy.py ../demokit/restrictions.default skeleton2015advanced.repy 127.0.0.1 63100
  elif len(callargs) == 2:
    port = int(callargs[1])
    ip = callargs[0]

  # Fail if we don't have 1 or 2 arguments
  else:
    raise Exception("Specify a port only for auto detection of IP, or specify IP and port")
  #Initialize Port and IP
  mycontext['myPort'] = port
  mycontext['myIP'] = ip
  #read header and footer html files
  mycontext['headerhtml'] = file("header.html").read()
  mycontext['footerhtml'] = file("footer.html").read()

  mycontext['lock'] = getlock()

  mycontext['boardMessages'] = []
  mycontext['seqNumber'] = 0

  start_board()
